# Cursor Rules

Only supabase's sql code should be sent in code blocks. The other code should still use the `edit_file`.

## Project's Database Schema

Refer to the [database schema documentation](./documentation/database.md) for the most updated project's database schema.

## Project Folder Structure

### Components

- All new components should be added to the /components folder
- Components should not have any logic (API calls, database queries, etc.), they should only be presentational

The /components/ui folder is reserved for components that are part of the Shadcn UI library.

Components that are not part of the Shadcn UI library should be added to the /components folder, and may use the /components/ui folder for shared components.

### Pages

Following the NextJS convention, all new pages should be added to the /app folder.

- Auth pages should be added to the /app/(auth-pages) folder
- Pages related to the workspace should be added to the /app/(protected) folder
  - A "Page" in this folder would consist of a layout.tsx file and a page.tsx file.

If the layout.tsx file or page.tsx file has both server and client side logic, split them into 3 files:

- page.tsx
- page-wrapper.tsx (handles all the server side logic)
- page-client.tsx (handles all the presentational side of the page)

### API Routes

- All new api routes should be added to the /app/api folder

## NextJS

### API Route Handlers

When writing api routes, do not write params as an argument, instead write them as a variable like the following:

```ts
import { type NextRequest } from "next/server"

export function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams
  const query = searchParams.get("query")
  // query is "hello" for /api/search?query=hello
}
```

NOT

```ts
export async function PATCH(
  request: Request,
  { params }: { params: { workspaceId: string } }
) {
  ...
}
```

docs: https://nextjs.org/docs/app/building-your-application/routing/route-handlers#url-query-parameters

## Supabase

### SQL Code

The user does not have supabase locally, so you need to send him the sql code in the form of a code block to make it easy to copy paste into the supabase sql editor so that he can manually run it. Don't make any new files, just send the sql code.

### `createServerClient()` function

When calling the createServerClient function, do not write `get` or `set` as they are deprecated. Use `getAll` and `setAll` instead.

```ts
import { createServerClient } from "@supabase/ssr"
import { NextResponse, type NextRequest } from "next/server"

export async function updateSession(request: NextRequest) {
  let supabaseResponse = NextResponse.next({
    request,
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) =>
            request.cookies.set(name, value)
          )
          supabaseResponse = NextResponse.next({
            request,
          })
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          )
        },
      },
    }
  )

  // IMPORTANT: Avoid writing any logic between createServerClient and
  // supabase.auth.getUser(). A simple mistake could make it very hard to debug
  // issues with users being randomly logged out.

  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (
    !user &&
    !request.nextUrl.pathname.startsWith("/login") &&
    !request.nextUrl.pathname.startsWith("/auth")
  ) {
    // no user, potentially respond by redirecting the user to the login page
    const url = request.nextUrl.clone()
    url.pathname = "/login"
    return NextResponse.redirect(url)
  }

  // IMPORTANT: You *must* return the supabaseResponse object as it is. If you're
  // creating a new response object with NextResponse.next() make sure to:
  // 1. Pass the request in it, like so:
  //    const myNewResponse = NextResponse.next({ request })
  // 2. Copy over the cookies, like so:
  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())
  // 3. Change the myNewResponse object to fit your needs, but avoid changing
  //    the cookies!
  // 4. Finally:
  //    return myNewResponse
  // If this is not done, you may be causing the browser and server to go out
  // of sync and terminate the user's session prematurely!

  return supabaseResponse
}
```

NOT

```ts
const cookieStore = await cookies()
const supabase = createServerClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  {
    cookies: {
      get(name: string) {
        return cookieStore.get(name)?.value
      },
    },
  }
)
```

docs: https://supabase.com/docs/guides/auth/server-side/creating-a-client?queryGroups=environment&environment=middleware
